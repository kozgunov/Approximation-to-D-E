import numpy as np
import pandas as pd
import matplotlib.pyplot as plt  # optional library
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C
from sklearn.linear_model import LinearRegression
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, explained_variance_score
import time  # test function

np.random.seed(0)  # generate data set with 500 Linear Differential Equations
X_list = []
y_list = []
for i in range(500):
    X = np.random.rand(100, 1) * 20 - 10
    y = 2 * X - 1 + np.random.randn(100, 1) * 0.1
    X_list.append(X)
    y_list.append(y)
    print(X_list)
    print(y_list)


mse_gp_list = []  # in the order to store & output the results we created empty lists
mae_gp_list = []
r2_gp_list = []
explained_variance_gp_list = []
rmse_gp_list = []

mse_poly_list = []
mae_poly_list = []
r2_poly_list = []
explained_variance_poly_list = []
rmse_poly_list = []

mse_nn_list = []
mae_nn_list = []
r2_nn_list = []
explained_variance_nn_list = []
rmse_nn_list = []

for i in range(500):
    kernel = C(1.0, (1e-3, 1e3)) * RBF(10, (1e-2, 1e2))  # Gaussian Processes
    gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)
    gp.fit(X_list[i], y_list[i])
    X_pred = np.linspace(-10, 10, 100).reshape(-1, 1)
    y_pred, std = gp.predict(X_pred, return_std=True)

    poly_reg = LinearRegression()  # Polynomial Regression
    poly_reg.fit(X_list[i], y_list[i])
    X_poly = np.linspace(-10, 10, 100).reshape(-1, 1)
    y_poly = poly_reg.predict(X_poly)

    nn = MLPRegressor(hidden_layer_sizes=(100,), max_iter=1000, learning_rate_init=0.02)  # Neural Networks
    nn.fit(X_list[i], y_list[i].ravel())
    X_nn = np.linspace(-10, 10, 100).reshape(-1, 1)
    y_nn = nn.predict(X_nn)

    y_pred_gp = gp.predict(X_list[i])  # evaluating the Gaussian processes model
    mse_gp = mean_squared_error(y_list[i], y_pred_gp)  # metric mse
    mse_gp_list.append(mse_gp)
    mae_gp = mean_absolute_error(y_list[i], y_pred_gp)  # metric mae
    mae_gp_list.append(mae_gp)
    r2_gp = r2_score(y_list[i], y_pred_gp)  # metric r2
    r2_gp_list.append(r2_gp)
    explained_variance_gp = explained_variance_score(y_list[i], y_pred_gp)  # metric explained variance score
    explained_variance_gp_list.append(explained_variance_gp)
    rmse_gp = np.sqrt(mean_squared_error(y_list[i], y_pred_gp))  # metric root mean squared error
    rmse_gp_list.append(rmse_gp)

    y_pred_poly = poly_reg.predict(X_list[i])  # evaluating the polynomial regression model
    mse_poly = mean_squared_error(y_list[i], y_pred_poly)
    mse_poly_list.append(mse_poly)
    mae_poly = mean_absolute_error(y_list[i], y_pred_poly)
    mae_poly_list.append(mae_poly)
    r2_poly = r2_score(y_list[i], y_pred_poly)
    r2_poly_list.append(r2_poly)
    explained_variance_poly = explained_variance_score(y_list[i], y_pred_poly)
    explained_variance_poly_list.append(explained_variance_poly)
    rmse_poly = np.sqrt(mean_squared_error(y_list[i], y_pred_poly))
    rmse_poly_list.append(rmse_poly)

    y_pred_nn = nn.predict(X_list[i])  # evaluating the NN model
    mse_nn = mean_squared_error(y_list[i], y_pred_nn)
    mse_nn_list.append(mse_nn)
    mae_nn = mean_absolute_error(y_list[i], y_pred_nn)
    mae_nn_list.append(mae_nn)
    r2_nn = r2_score(y_list[i], y_pred_nn)
    r2_nn_list.append(r2_nn)
    explained_variance_nn = explained_variance_score(y_list[i], y_pred_nn)
    explained_variance_nn_list.append(explained_variance_nn)
    rmse_nn = np.sqrt(mean_squared_error(y_list[i], y_pred_nn))
    rmse_nn_list.append(rmse_nn)

    ## we can uncomment this part of code for showing the obtained results via the graghs
    '''plt.figure() # plot the results using matplotlib
    plt.scatter(X_list[i], y_list[i], color='black', label='Data')
    plt.plot(X_pred, y_pred, color='blue', label='Gaussian Processes')
    plt.plot(X_poly, y_poly, color='red', label='Polynomial Regression')
    plt.plot(X_nn, y_nn, color='green', label='Neural Networks')
    plt.title('Equation '+str(i+1))
    plt.legend()
    #plt.show() '''


results = pd.DataFrame({'MSE (Gaussian Processes)': mse_gp_list,
                        'MAE (Gaussian Processes)': mae_gp_list,
                        'R-squared (Gaussian Processes)': r2_gp_list,
                        'Explained Variance (Gaussian Processes)': explained_variance_gp_list,
                        'RMSE (Gaussian Processes)': rmse_gp_list,
                        'MSE (Polynomial Regression)': mse_poly_list,
                        'MAE (Polynomial Regression)': mae_poly_list,
                        'R-squared (Polynomial Regression)': r2_poly_list,
                        'Explained Variance (Polynomial Regression)': explained_variance_poly_list,
                        'RMSE (Polynomial Regression)': rmse_poly_list,
                        'MSE (Neural Networks)': mse_nn_list,
                        'MAE (Neural Networks)': mae_nn_list,
                        'R-squared (Neural Networks)': r2_nn_list,
                        'Explained Variance (Neural Networks)': explained_variance_nn_list,
                        'RMSE (Neural Networks)': rmse_nn_list})  # create dataframe from pandas for storing the obtained results

# print('MSE (Gaussian Processes)', mse_gp_list, "\n")  # example of output
# print('MSE (Polynomial Regression)', mse_poly_list, "\n")
# print('MSE (Neural Networks)', mse_nn_list, "\n")

# print(results.describe()) we can also output the data here
results.to_excel(r'sample_data.xlsx')  # we'll output and store the data into ecxel file: sample_data.xlsx

