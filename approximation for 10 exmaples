import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C
from sklearn.linear_model import LinearRegression
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error

# Differential Equation: y' = 2x - 1

# Generate data for 10 examples
np.random.seed(0)
X_list = []
y_list = []
for i in range(10):
    X = np.random.rand(100, 1) * 10 - 5
    y = 2 * X - 1 + np.random.randn(100, 1) * 0.1
    X_list.append(X)
    y_list.append(y)

# Create empty lists to store results
mse_gp_list = []
mse_poly_list = []
mse_nn_list = []

# Loop over examples
for i in range(10):

    # Gaussian Processes
    kernel = C(1.0, (1e-3, 1e3)) * RBF(10, (1e-2, 1e2))
    gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)
    gp.fit(X_list[i], y_list[i])
    X_pred = np.linspace(-5, 5, 100).reshape(-1, 1)
    y_pred, std = gp.predict(X_pred, return_std=True)

    # Polynomial Regression
    poly_reg = LinearRegression()
    poly_reg.fit(X_list[i], y_list[i])
    X_poly = np.linspace(-5, 5, 100).reshape(-1, 1)
    y_poly = poly_reg.predict(X_poly)

    # Neural Networks
    nn = MLPRegressor(hidden_layer_sizes=(50,), max_iter=1000, learning_rate_init=0.01)
    nn.fit(X_list[i], y_list[i].ravel())
    X_nn = np.linspace(-5, 5, 100).reshape(-1, 1)
    y_nn = nn.predict(X_nn)

    # Evaluate the models
    y_pred_gp = gp.predict(X_list[i])
    mse_gp = mean_squared_error(y_list[i], y_pred_gp)
    mse_gp_list.append(mse_gp)

    y_pred_poly = poly_reg.predict(X_list[i])
    mse_poly = mean_squared_error(y_list[i], y_pred_poly)
    mse_poly_list.append(mse_poly)

    y_pred_nn = nn.predict(X_list[i])
    mse_nn = mean_squared_error(y_list[i], y_pred_nn)
    mse_nn_list.append(mse_nn)

    # Plot the results
    plt.figure()
    plt.scatter(X_list[i], y_list[i], color='black', label='Data')
    plt.plot(X_pred, y_pred, color='blue', label='Gaussian Processes')
    plt.plot(X_poly, y_poly, color='red', label='Polynomial Regression')
    plt.plot(X_nn, y_nn, color='green', label='Neural Networks')
    plt.title('Example '+str(i+1))
    plt.legend()
    plt.show()

# Create a pandas dataframe to store the results
results = pd.DataFrame({'MSE (Gaussian Processes)': mse_gp_list,
                        'MSE (Polynomial Regression)': mse_poly_list,
                        'MSE (Neural Networks)': mse_nn_list})
print('MSE (Gaussian Processes)', mse_gp_list, "\n")
print('MSE (Polynomial Regression)', mse_poly_list, "\n")
print('MSE (Neural Networks)', mse_nn_list, "\n")

print(results.describe())
